[{"/Users/luciacerchie/Downloads/react-jobly/frontend/src/reportWebVitals.js":"1","/Users/luciacerchie/Downloads/react-jobly/frontend/src/App.js":"2","/Users/luciacerchie/Downloads/react-jobly/frontend/src/NavBar.js":"3","/Users/luciacerchie/Downloads/react-jobly/frontend/src/Home.js":"4","/Users/luciacerchie/Downloads/react-jobly/frontend/src/index.js":"5","/Users/luciacerchie/Downloads/react-jobly/frontend/src/CompanyList.js":"6","/Users/luciacerchie/Downloads/react-jobly/frontend/src/api.js":"7","/Users/luciacerchie/Downloads/react-jobly/frontend/src/CompanyCard.js":"8","/Users/luciacerchie/Downloads/react-jobly/frontend/src/JobList.js":"9","/Users/luciacerchie/Downloads/react-jobly/frontend/src/JobCard.js":"10","/Users/luciacerchie/Downloads/react-jobly/frontend/src/Profile.js":"11","/Users/luciacerchie/Downloads/react-jobly/frontend/src/Signup.js":"12","/Users/luciacerchie/Downloads/react-jobly/frontend/src/Login.js":"13","/Users/luciacerchie/Downloads/react-jobly/frontend/src/Search.js":"14","/Users/luciacerchie/Downloads/react-jobly/frontend/src/UserContext.js":"15"},{"size":362,"mtime":1609789502185,"results":"16","hashOfConfig":"17"},{"size":4476,"mtime":1609961484256,"results":"18","hashOfConfig":"17"},{"size":1651,"mtime":1609961654516,"results":"19","hashOfConfig":"17"},{"size":456,"mtime":1609860172664,"results":"20","hashOfConfig":"17"},{"size":500,"mtime":1609789502184,"results":"21","hashOfConfig":"17"},{"size":1645,"mtime":1609950577219,"results":"22","hashOfConfig":"17"},{"size":3481,"mtime":1609961546544,"results":"23","hashOfConfig":"17"},{"size":1129,"mtime":1609949872419,"results":"24","hashOfConfig":"17"},{"size":1124,"mtime":1609868602438,"results":"25","hashOfConfig":"17"},{"size":840,"mtime":1609869762520,"results":"26","hashOfConfig":"17"},{"size":297,"mtime":1609861926653,"results":"27","hashOfConfig":"17"},{"size":2227,"mtime":1609956013951,"results":"28","hashOfConfig":"17"},{"size":1461,"mtime":1609958333744,"results":"29","hashOfConfig":"17"},{"size":1092,"mtime":1609947605608,"results":"30","hashOfConfig":"17"},{"size":179,"mtime":1609958770535,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1ksl280",{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"49"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/luciacerchie/Downloads/react-jobly/frontend/src/reportWebVitals.js",[],["71","72"],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/App.js",["73","74","75"],"import React, {useState, useEffect, useContext} from 'react';\nimport { BrowserRouter, Redirect } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router-dom\";\nimport NavBar from './NavBar';\nimport Home from './Home';\nimport CompanyList from './CompanyList';\nimport CompanyCard from './CompanyCard';\nimport JobList from './JobList';\nimport JobCard from './JobCard';\nimport Login from './Login';\nimport Signup from './Signup';\nimport Profile from './Profile'\nimport JoblyApi from './api'\nimport UserContext from \"./UserContext\";\nimport jwt from \"jsonwebtoken\";\n\nimport './App.css';\n\n\nfunction App() {\n  //USER AUTH FUNCTIONS\n  const [token, setToken] = useState([]);\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null)\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n  async function getCurrentUser() {\n    if (token) {\n      try {\n        let { username } = jwt.decode(token);\n        // put the token on the Api class so it can use it to call the API.\n        JoblyApi.token = token;\n        let currentUser = await JoblyApi.getCurrentUser(username);\n        setCurrentUser(currentUser);\n        setApplicationIds(new Set(currentUser.applications));\n      } catch (err) {\n        console.error(\"App loadUserInfo: problem loading\", err);\n        setCurrentUser(null);\n      }\n    }\n    setInfoLoaded(true);\n  }\n\n  // set infoLoaded to false while async getCurrentUser runs; once the\n  // data is fetched (or even if an error happens!), this will be set back\n  // to false to control the spinner.\n  setInfoLoaded(false);\n  getCurrentUser();\n}, [token]);\n\n  async function signupUser(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      let currentUser = await JoblyApi.getCurrentUser(signupData.username);\n      setCurrentUser(currentUser);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n  async function loginUser(signupData) {\n    try {\n      let token = await JoblyApi.login(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n  //FUNCTIONS TO HELP LOAD PROPS FOR COMPONENTS\n  const [isLoading, setIsLoading] = useState(true);\n  const [companies, setCompanies] = useState([]); \n  const [jobs, setJobs] = useState([]); \n  // make API call to get all companies to pass to CompanyList\n  useEffect(() => {\n    async function getCompanies() {\n      let companies = await JoblyApi.getAllCompanies();\n      setCompanies(companies);\n      setIsLoading(false);\n    }\n    async function getJobs() {\n      let jobs = await JoblyApi.getAllJobs();\n      setJobs(jobs);\n      setIsLoading(false);\n    }\n  \n    getCompanies();\n    getJobs();\n \n  }, []);\n\n  if (isLoading) {\n    return <p>Loading &hellip;</p>;\n  }\n\n  return (\n<div className=\"App\">\n  \n    <BrowserRouter>\n      <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n        <NavBar logout={logout} />\n        <main>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/companies\">\n            <CompanyList companiesProps={companies}/>\n            </Route>\n            <Route exact path=\"/companies/:handle\">\n              <CompanyCard companies={companies}/>\n            </Route>\n            <Route exact path=\"/jobs\">\n              <JobList jobs={jobs}/>\n            </Route>\n            <Route exact path=\"/jobs/:id\">\n              <JobCard jobs={jobs}/>\n            </Route>\n            <Route exact path=\"/login\">\n              <Login login={loginUser}/>\n            </Route>\n            <Route exact path=\"/signup\">\n              <Signup signupUser={signupUser}/>\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile />\n            </Route>\n            <Route>\n              <p>Hmmm. This page seems to be missing.</p>\n            </Route>\n            <Redirect to=\"/\" />\n          </Switch>\n        </main>\n        </UserContext.Provider >\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n",["76","77"],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/NavBar.js",[],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/Home.js",[],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/index.js",[],["78","79"],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/CompanyList.js",["80"],"import React, {useState, useEffect} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Search from './Search'\nimport CompanyCard from './CompanyCard'\nimport JoblyApi from './api'\nimport \"./styles.css\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  ListGroup\n} from \"reactstrap\";\nimport {v4 as uuid} from 'uuid';\n\nfunction CompanyList(){\n\n\n    const [companies, setCompanies] = useState(null);\n  \n    useEffect(function getCompaniesOnMount() {\n      console.debug(\"CompanyList useEffect getCompaniesOnMount\");\n      search();\n    }, []);\n  \n    /** Triggered by search form submit; reloads companies. */\n    async function search(name) {\n      let companies = await JoblyApi.searchCompanies(name);\n      setCompanies(companies);\n      console.debug(\"CompanyList\", companies);\n    }\n\n    if (!companies) return 'no companies';\n\n    return (\n        <section className=\"CompanyList col-md-4\">\n            <Search searchFor={search} />\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            Company List\n          </CardTitle>\n          \n          <CardText>\n            Some quick example text to build on the card title and make up the\n            bulk of the card's content. \n          </CardText>\n          <ListGroup>\n          {companies.map(company => (\n              <Link to={`/companies/${company.handle}`} key={company.id}>\n                <CompanyCard company={company}/>\n              </Link>\n            ))};\n          </ListGroup>\n          <ListGroup>\n          </ListGroup>\n        </CardBody>\n      </Card>\n    </section>\n    )\n}\n\nexport default CompanyList;",["81","82"],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/api.js",[],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/CompanyCard.js",["83","84","85","86","87"],"import React, {useState} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport Api from \"./api\";\nimport \"./styles.css\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText\n} from \"reactstrap\";\nimport {v4 as uuid} from 'uuid';\n\nfunction CompanyCard({company, companies}){\n    const { handle } = useParams();\n    if (handle)\n   { \n    let company = companies.find(company => company.handle === handle); \n    return (\n        <section className=\"col-md-4\">\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n           {company.name}\n          </CardTitle>\n          <CardText>\n            {company.description}\n          </CardText>\n        </CardBody>\n      </Card>\n    </section>\n    ) }\n    return (\n      <section className=\"col-md-4\">\n    <Card>\n      <CardBody>\n        <CardTitle className=\"font-weight-bold text-center\">\n         {company.name}\n        </CardTitle>\n        <CardText>\n          {company.description}\n        </CardText>\n      </CardBody>\n    </Card>\n  </section>\n  )\n}\n\nexport default CompanyCard;","/Users/luciacerchie/Downloads/react-jobly/frontend/src/JobList.js",["88","89","90","91","92"],"import React, {useState} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Api from \"./api\";\nimport JobCard from './JobCard'\nimport \"./styles.css\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  ListGroup,\n  ListGroupItem\n} from \"reactstrap\";\nimport {v4 as uuid} from 'uuid';\n\nfunction JobList({jobs}){\n        const [postedJobs, setPostedJobs] = useState([]); \n        return (\n            <section className=\"col-md-4\">\n          <Card>\n            <CardBody>\n              <CardTitle className=\"font-weight-bold text-center\">\n                Job List\n              </CardTitle>\n              <CardText>\n                Here's a list of available jobs.\n              </CardText>\n              <ListGroup>\n              {jobs.map(job => (\n                  <Link to={`/jobs/${job.id}`}>\n                    <ListGroupItem> title: {job.title}, salary: {job.salary}</ListGroupItem>\n                  </Link>\n                ))};\n              </ListGroup>\n              <ListGroup>\n              </ListGroup>\n            </CardBody>\n          </Card>\n        </section>\n    )\n}\n\nexport default JobList;\n\n","/Users/luciacerchie/Downloads/react-jobly/frontend/src/JobCard.js",["93","94","95","96","97"],"import React from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport Api from \"./api\";\nimport \"./styles.css\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText\n} from \"reactstrap\";\nimport {v4 as uuid} from 'uuid';\n\nfunction JobCard({jobs}){\n    console.log(jobs)\n    const { id } = useParams();\n    let job = jobs.find(job => job === job);\n    console.log(job)\n    if (!job){\n       return ('Job not found');\n    } \n    return (\n        <section className=\"col-md-4\">\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n           {job.title}\n          </CardTitle>\n          <CardText>\n            {job.company_handle}\n            {job.equity}\n            {job.salary}\n          </CardText>\n        </CardBody>\n      </Card>\n    </section>\n    )\n}\n\nexport default JobCard;","/Users/luciacerchie/Downloads/react-jobly/frontend/src/Profile.js",["98"],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/Signup.js",[],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/Login.js",[],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/Search.js",[],"/Users/luciacerchie/Downloads/react-jobly/frontend/src/UserContext.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":37,"nodeType":"105","messageId":"106","endLine":1,"endColumn":47},{"ruleId":"103","severity":1,"message":"107","line":23,"column":10,"nodeType":"105","messageId":"106","endLine":23,"endColumn":20},{"ruleId":"103","severity":1,"message":"108","line":25,"column":10,"nodeType":"105","messageId":"106","endLine":25,"endColumn":24},{"ruleId":"99","replacedBy":"109"},{"ruleId":"101","replacedBy":"110"},{"ruleId":"99","replacedBy":"111"},{"ruleId":"101","replacedBy":"112"},{"ruleId":"103","severity":1,"message":"113","line":14,"column":15,"nodeType":"105","messageId":"106","endLine":14,"endColumn":19},{"ruleId":"99","replacedBy":"114"},{"ruleId":"101","replacedBy":"115"},{"ruleId":"103","severity":1,"message":"116","line":1,"column":16,"nodeType":"105","messageId":"106","endLine":1,"endColumn":24},{"ruleId":"103","severity":1,"message":"117","line":2,"column":10,"nodeType":"105","messageId":"106","endLine":2,"endColumn":14},{"ruleId":"103","severity":1,"message":"118","line":3,"column":10,"nodeType":"105","messageId":"106","endLine":3,"endColumn":18},{"ruleId":"103","severity":1,"message":"119","line":4,"column":8,"nodeType":"105","messageId":"106","endLine":4,"endColumn":11},{"ruleId":"103","severity":1,"message":"113","line":12,"column":15,"nodeType":"105","messageId":"106","endLine":12,"endColumn":19},{"ruleId":"103","severity":1,"message":"119","line":3,"column":8,"nodeType":"105","messageId":"106","endLine":3,"endColumn":11},{"ruleId":"103","severity":1,"message":"120","line":4,"column":8,"nodeType":"105","messageId":"106","endLine":4,"endColumn":15},{"ruleId":"103","severity":1,"message":"113","line":14,"column":15,"nodeType":"105","messageId":"106","endLine":14,"endColumn":19},{"ruleId":"103","severity":1,"message":"121","line":17,"column":16,"nodeType":"105","messageId":"106","endLine":17,"endColumn":26},{"ruleId":"103","severity":1,"message":"122","line":17,"column":28,"nodeType":"105","messageId":"106","endLine":17,"endColumn":41},{"ruleId":"103","severity":1,"message":"118","line":2,"column":10,"nodeType":"105","messageId":"106","endLine":2,"endColumn":18},{"ruleId":"103","severity":1,"message":"119","line":3,"column":8,"nodeType":"105","messageId":"106","endLine":3,"endColumn":11},{"ruleId":"103","severity":1,"message":"113","line":11,"column":15,"nodeType":"105","messageId":"106","endLine":11,"endColumn":19},{"ruleId":"103","severity":1,"message":"123","line":15,"column":13,"nodeType":"105","messageId":"106","endLine":15,"endColumn":15},{"ruleId":"124","severity":1,"message":"125","line":16,"column":32,"nodeType":"126","messageId":"127","endLine":16,"endColumn":43},{"ruleId":"103","severity":1,"message":"128","line":6,"column":5,"nodeType":"105","messageId":"106","endLine":6,"endColumn":13},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'infoLoaded' is assigned a value but never used.","'applicationIds' is assigned a value but never used.",["129"],["130"],["129"],["130"],"'uuid' is defined but never used.",["129"],["130"],"'useState' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'Api' is defined but never used.","'JobCard' is defined but never used.","'postedJobs' is assigned a value but never used.","'setPostedJobs' is assigned a value but never used.","'id' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","'CardText' is defined but never used.","no-global-assign","no-unsafe-negation"]